apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.26.1 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: backend
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: backend
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/test: "true"
        io.kompose.service: backend
    spec:
      containers:
        - env:
            - name: DATABASE_CONNECTION
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_CONNECTION
                  name: env
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_HOST
                  name: env
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_NAME
                  name: env
            - name: DATABASE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_PASSWORD
                  name: env
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_PORT
                  name: env
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_URL
                  name: env
            - name: DATABASE_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_USERNAME
                  name: env
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  key: DEBUG
                  name: env
            - name: IMAGE_TAG
              valueFrom:
                configMapKeyRef:
                  key: IMAGE_TAG
                  name: env
            - name: JWT_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: JWT_SECRET_KEY
                  name: env
          image: backend
          name: backend
          ports:
            - containerPort: 3000
          resources: {}
          imagePullPolicy: Never
          volumeMounts:
            - mountPath: /golang-mux-gorm-boilerplate
              name: backend-claim0
      restartPolicy: Always
      volumes:
        - name: backend-claim0
          persistentVolumeClaim:
            claimName: backend-claim0
status: {}
